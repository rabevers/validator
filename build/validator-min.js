var Gp=window.Gp||{};Gp.Validator=function(){function _parseValidatorString(validatorString){return validatorString.split(validatorStringSplitCharacter)}function _parseValidatorArgumentString(validatorArgumentString){for(var arr=validatorArgumentString.split(";"),parsedData=[],i=0;i<arr.length;i++){var keyValueArray=arr[i].split("=");parsedData[keyValueArray[0]]=keyValueArray[1]}return parsedData}function _callCustomValidator(path){return[window].concat(path.split(".")).reduce(function(prev,curr){return prev[curr]})}function _setupValidation(element,validatorString){if(!validatorString)return!0;var validatorArray=_parseValidatorString(validatorString);element=$(element),element.on("doValidate",function(){for(var argumentObject={},returnValue=!0,i=0;i<validatorArray.length;i++){validatorParts=validatorArray[i].split(":"),validatorParts[1]&&(argumentObject=_parseValidatorArgumentString(validatorParts[1]));var result;if(_callCustomValidator(validatorParts[0])&&"function"==typeof _callCustomValidator(validatorParts[0]).validate)result=_callCustomValidator(validatorParts[0]).validate(element,argumentObject);else{if(!Gp.Validators[validatorParts[0]])throw new Error("Validator "+validatorParts[0]+" not found.");result=Gp.Validators[validatorParts[0]].validate(element,argumentObject)}var callback=element.data("validator-callback");if("function"!=typeof window[callback])throw new Error("The defined callback method is not a function");window[callback](element,result),result.isValid===!1&&(returnValue=!1,valid=!1)}return returnValue})}var validatorParts,validatorStringSplitCharacter="&",valid=!0;return{validate:function(className,containerId){var containerString="";containerId&&(containerString="#"+containerId+" "),$(containerString+"."+className).each(function(index,element){if("FORM"===element.tagName)$(element).submit(function(e){var result=!0;valid=!0,$(element).find("."+className).each(function(index,element){result=$(element).trigger("doValidate")}),valid||e.preventDefault()});else{var triggers=$(element).data("validator-trigger");triggers&&(triggers=triggers.split(","));var validationInformation=$(element).data("validator");if(_setupValidation(element,validationInformation),triggers)for(var x=0;x<triggers.length;x++)$(element).on(triggers[x].trim(),function(){return $(element).trigger("doValidate")})}})},configure:function(configurationObject){return configurationObject.validatorSplitter&&(validatorStringSplitCharacter=configurationObject.validatorSplitter),this}}}(),Gp.Validators={required:{messages:{notValid:"The field is required, a value must be entered"},validate:function(element){var value=element.val();return value.length>0?{isValid:!0}:{isValid:!1,validator:"required",messages:{inValid:this.messages.notValid}}}},length:{messages:{tooShort:"The value is too short",tooLong:"The value is too long"},validate:function(element,settings){var returnObject={},value=element.val();return settings.minLength&&value.length<settings.minLength&&(returnObject.tooShort=this.messages.tooShort),settings.maxLength&&value.length>settings.maxLength&&(returnObject.tooLong=this.messages.tooLong),Object.keys(returnObject).length>0?{isValid:!1,validator:"length",messages:returnObject}:{isValid:!0,validator:"length"}}},regexp:{messages:{notValid:"Value doesn't match pattern"},validate:function(element,settings){var pattern=new RegExp(settings.regexp),value=element.val();return pattern.test(value)===!0?{isValid:!0,validator:"regexp"}:{isValid:!1,validator:"regexp",messages:{inValid:this.messages.notvalid}}}},digits:{messages:{notValid:"Value should contain only digits"},validate:function(element){settings={regexp:/^[0-9]+$/};var result=Gp.Validators.regexp.validate(element,settings);return result.isValid===!0?{isValid:!0,validator:"digits"}:{isValid:!1,validator:"digits",messages:{inValid:this.messages.notValid}}}},zipcode:{messages:{notValid:"Value is not a zipcode"},validate:function(element){settings={regexp:/^[1-9][0-9]{3}[\s]?[A-Za-z]{2}$/};var result=Gp.Validators.regexp.validate(element,settings);return result.isValid===!0?{isValid:!0,validator:"zipcode"}:{isValid:!1,validator:"zipcode",messages:{inValid:this.messages.notValid}}}},phonenumber:{messages:{notValid:"Value is not a phone number"},validate:function(){return{isValid:!0,validator:"phonenumber"}}},uri:{messages:{notValid:"Value is not a uri"},validate:function(){return{isValid:!0,validator:"uri"}}},emailaddress:{messages:{notValid:"Value is not a valid email address"},validate:function(element){settings={regexp:/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/};var result=Gp.Validators.regexp.validate(element,settings);return result.isValid===!0?{isValid:!0,validator:"emailaddress"}:{isValid:!1,validator:"emailaddress",messages:{inValid:this.messages.notValid}}}},hostname:{messages:{notValid:"Value is not a valid hostname"},validate:function(element){settings={regexp:/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \?=.-]*)*\/?$/};var result=Gp.Validators.regexp.validate(element,settings);return result.isValid===!0?{isValid:!0,validator:"hostname"}:{isValid:!1,validator:"hostname",messages:{inValid:this.messages.notValid}}}},iban:{messages:{notValid:"Value is not a valid IBAN"},validate:function(element){settings={regexp:/[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{4}[0-9]{7}([a-zA-Z0-9]?){0,16}/};var result=Gp.Validators.regexp.validate(element,settings);return result.isValid===!0?{isValid:!0,validator:"hostname"}:{isValid:!1,validator:"hostname",messages:{inValid:this.messages.notValid}}}}};